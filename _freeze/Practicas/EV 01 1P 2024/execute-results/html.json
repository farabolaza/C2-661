{
  "hash": "6a2c789c963f6f7adfeb6f3935c7001b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Primer parcial\nformat:\n  html:\n    toc: true\n    number-sections: true\n    html-math-method: katex\n---\n\n# Simulacro de parcial\n\n::: {#exr-primero}\n## Python básico\n\nCrear una función que devuelva tres arrays o listas, para el tiempo y para las posiciones $x$ e $y$ \nen el plano de un cuerpo que se mueve bajo condiciones iniciales arbiatrarias con aceleración constante ($a_x$,$a_y$,$v_x$,$v_y$,$x_0$,$y_0$,$\\Delta t$).\n:::\n\n::: {#exr-segundo}\n## Pandas y numpy\n\nSea $a_y=-3$, $v_{0x}=10$ y $x_0=2$ genere un dataframe con valores creados con la función anterior para el tiempo de vuelo del cuerpo y guardelo como .csv.\n:::\n\n::: {#exr-tercero}\n## Matplotlib\n\nImporte los datos del csv y haga gráficas $x(t)$, $y(t)$, $v_x(t)$, $v_y(t)$ e $y(x)$ que incluyan los nombres de los ejes con sus rótulos respctivos.\n:::\n\n::: {#exr-extra}\n## Matplotlib y animaciones\n\nHaga una animación de la gráfica $y(x)$ para el tiempo de vuelo.\n:::\n\nUna pista de como encarar el último punto se puede ver a continuación \n(este código tal cual como está no corre, pero les puede servir de ayuda)\n\n``` python\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation\nfrom matplotlib.animation import PillowWriter\nfrom matplotlib import rc\nrc('animation', html='jshtml')\nimport numpy as np\nimport pandas as pd\n\n\n\ndef f(ax=0,ay=-9.8,v0x=0,v0y=0,x0=0,y0=0,dt=10):\n\n    t = np.linspace(0,dt,50*dt)\n    x = ax*t**2 + v0x*t + x0\n    y = ay*t**2 + v0y*t + y0\n\n    yr = y[y>0]\n    xr = x[:len(y[y>0])]\n    tr = t[:len(y[y>0])]\n\n    d = np.array([tr,xr,yr]) # analizar d\n    d2 = pd.DataFrame(d.T, columns=['t','x','y']) # analizar d2\n\n    return d\n\ndatos = f(ax=0,ay=-9.8,v0x=0,v0y=30,x0=0,y0=0,dt=10)\nfigura, ejes = plt.subplots()\ngrafico = ejes.plot(datos[0][0],datos[2][0])[0]\nejes.set(xlim=[0,max(datos[0])], ylim=[0,max(datos[2])], xlabel='Tiempo [s]', ylabel='d')\n\ndef actualizar(frame):\n    x = datos[0][:frame]\n    y = datos[2][:frame]\n    grafico.set_xdata(x)\n    grafico.set_ydata(y)\n\n    return grafico\n\nanimacion = animation.FuncAnimation(fig=figura,func=actualizar,frames=len(datos[0]),interval=30)\n```\n\n",
    "supporting": [
      "EV 01 1P 2024_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}